(* -*- tuareg -*- *)
let coverage_rewriter =
  match Sys.getenv "BISECT_ENABLE" with
  | "YES" -> "bisect_ppx"
  | _ -> ""
  | exception Not_found -> ""

let runtime_coverage_enabled, coverage_dep =
  let use_bisect_runtime =
    match Sys.getenv "BISECT_RUNTIME" with
    | "YES" -> true
    | _ -> false
    | exception Not_found -> false in
  if use_bisect_runtime then
    "enabled.ml", "bisect_ppx.runtime"
  else
    "disabled.ml", ""

let () = Printf.ksprintf Jbuild_plugin.V1.send {|

(rule
   (targets xcp_coverage.ml)
   (action (copy coverage/%s %%{targets}))
)

(library
  (name xcp)
  (public_name xapi-idl)
  (flags (:standard -w -39 -warn-error -3))
  (modules (:standard \ scheduler task_server updates))
  (c_names syslog_stubs)
  (libraries
    %s
    cmdliner
    cohttp
    fd-send-recv
    logs
    message-switch-core
    message-switch-unix
    ppx_sexp_conv.runtime-lib
    re
    rpclib.core
    rpclib.xml
    sexplib
    threads
    unix
    uri
    xapi-backtrace
    xapi-stdext-monadic
    xapi-stdext-pervasives
    xapi-stdext-threads
    xapi-inventory
    xmlm
  )
  (wrapped false)
  (preprocess (pps ppx_sexp_conv ppx_deriving_rpc %s))
)

(library
  (name xcp_updates)
  (public_name xapi-idl.updates)
  (flags (:standard -w -39))
  (modules updates task_server scheduler)
  (libraries xapi-idl)
  (wrapped false)
  (preprocess (pps ppx_deriving_rpc %s))
)
|} runtime_coverage_enabled coverage_dep coverage_rewriter coverage_rewriter
